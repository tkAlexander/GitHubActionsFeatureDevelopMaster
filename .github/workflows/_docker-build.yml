name: Build, test and push docker images

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      version:
        required: true
        type: string
      push:
        required: false
        type: boolean
        default: false

jobs:
  build:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      - name: Docker tags
        id: tags
        env:
          BUILD: ${{ github.run_number }}
          ENVIRONMENT: ${{ inputs.environment }}
          GIT_BRANCH: ${{ github.ref }}
          IMAGE_NAME: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.AWS_REPOSITORY }}
          VERSION: ${{ inputs.version }}
        run: |
          tags=()
          
          case $ENVIRONMENT in
            development)
              tags+=("${IMAGE_NAME}:${VERSION}_b${BUILD}")
              case $GIT_BRANCH in
                refs/heads/develop)
                  tags+=("${IMAGE_NAME}:${VERSION}_dev")
                  ;;
                refs/heads/feature/*)
                  tags+=("${IMAGE_NAME}:feature_branch_${VERSION}_dev")
                  ;;          
              esac
              ;;
            testing)
              tags+=("${IMAGE_NAME}:${VERSION}_b${BUILD}")
              tags+=("${IMAGE_NAME}:${VERSION}_test")
              ;;
            production)
              tags+=("${IMAGE_NAME}:${VERSION}_b${BUILD}")
              tags+=("${IMAGE_NAME}:${VERSION}_stable")
              ;;
          esac
          
          echo "tags=$(printf ",%s" "${tags[@]}")" >> $GITHUB_OUTPUT
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
      -
        name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
      -
        name: Build and load
        uses: docker/build-push-action@v5
        with:
          build-args: |
            AWS_ACCOUNT_ID=${{ vars.AWS_ACCOUNT_ID }}
            AWS_SECRET_ACCESS_KEY
            AWS_ACCESS_KEY_ID
            AWS_SESSION_TOKEN
          context: ./${{ inputs.version }}
          load: true
          tags: ${{ vars.AWS_REPOSITORY }}:${{ inputs.version }}
      -
        name: Test
        env:
          REPOSITORY: ${{ vars.AWS_REPOSITORY }}
          VERSION: ${{ inputs.version }}
        run: |
          docker run --rm --name rabbitmq-${VERSION} \
            --health-cmd='rabbitmq-diagnostics -q ping' \
            --health-interval=5s \
            --health-timeout=5s \
            --health-retries=10 \
            -d ${REPOSITORY}:${VERSION}
          docker ps
          docker stop rabbitmq-${VERSION}
      -
        name: Set platform
        env:
          VERSION: ${{ inputs.version }}        
        run: |
          cd ./${VERSION}
          echo "PLATFORM=$(cat .platform)" >> "$GITHUB_ENV"     
      -
        name: Build and push
        uses: docker/build-push-action@v5
        with:
          build-args: |
            AWS_ACCOUNT_ID=${{ vars.AWS_ACCOUNT_ID }}
            AWS_SECRET_ACCESS_KEY
            AWS_ACCESS_KEY_ID
            AWS_SESSION_TOKEN
          context: ./${{ inputs.version }}
          platforms: ${{ env.PLATFORM }}
          push: ${{ inputs.push }}
          tags: ${{ steps.tags.outputs.tags }}
